import importlib
from freqtrade.strategy import IStrategy
from pandas import DataFrame
import os


class PluginBasedStrategy(IStrategy):
    """
    Plugin-based strategy with restricted exits based on entry tags.
    """

    INTERFACE_VERSION = 3

    minimal_roi = {"0": 0.1}
    stoploss = -0.1
    timeframe = "5m"

    def __init__(self, config: dict) -> None:
        super().__init__(config)
        self.plugins = self.load_plugins()

    def load_plugins(self):
        """
        Dynamically loads plugins from the `plugins` folder.
        """
        plugins = []
        plugin_path = os.path.join(os.path.dirname(__file__), "plugins")
        for file in os.listdir(plugin_path):
            if file.endswith(".py") and file != "__init__.py":
                module_name = f"plugins.{file[:-3]}"
                module = importlib.import_module(module_name)
                class_name = file[:-3]  # Assumes class name matches file name
                plugin_class = getattr(module, class_name)
                plugins.append(plugin_class())
        return plugins

    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        """
        Delegates indicator calculation to plugins.
        """
        for plugin in self.plugins:
            dataframe = plugin.populate_indicators(dataframe, metadata)
        return dataframe

    def populate_entry_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        """
        Applies entry signals generated by plugins.
        """
        dataframe["enter_long"] = 0
        dataframe["enter_tag"] = ""
        for plugin in self.plugins:
            dataframe = plugin.generate_entry_signals(dataframe, metadata)
        return dataframe

    def populate_exit_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        """
        Applies exit signals generated by plugins, restricting exits by entry tags.
        """
        dataframe["exit_long"] = 0
        dataframe["exit_tag"] = ""
        for plugin in self.plugins:
            dataframe = plugin.generate_exit_signals(dataframe, metadata)
            # Restrict exits to rows where entry tag matches the plugin's tag
            plugin_tag = plugin.get_plugin_tag()
            dataframe.loc[
                (dataframe["enter_tag"].str.contains(plugin_tag, na=False)),
                "exit_long",
            ] = dataframe["exit_long"]
            dataframe.loc[
                (dataframe["enter_tag"].str.contains(plugin_tag, na=False)),
                "exit_tag",
            ] = (
                dataframe.loc[
                    (dataframe["enter_tag"].str.contains(plugin_tag, na=False)),
                    "exit_tag",
                ]
                + "," + plugin_tag
            ).str.strip(",")
        return dataframe

